let players=[{colors:["Yellow"],rollsBeforeFirstSix:0},{colors:[],rollsBeforeFirstSix:0},{colors:[],rollsBeforeFirstSix:0},{colors:[],rollsBeforeFirstSix:0}];$(function(){const e=1e3,o={first:0,second:0};if(window.localStorage){const e=localStorage.getItem("players");e&&(players=JSON.parse(e),players.forEach(({colors:e},o)=>e.forEach((e,l)=>{const s=`select[data-player-index="${o}"][data-color-index="${l}"]`;$(s).val(e).trigger("change")})))}let l=[];$("a").click(function(e){e.preventDefault()}),$("#options select").change(function(){const e=$(this),o=e.data("playerIndex"),l=e.data("colorIndex"),s=e.val(),t=players[o];if(e.addClass("active"),t.colors[l]){const o=t.colors[l];e.closest("#options").find(`option.${o.toLowerCase()}`).removeClass("hide")}if(s)e.closest("#options").find("select:not(.active)").find(`option.${s.toLowerCase()}`).addClass("hide"),e.parent().find("select:not(.active)").prop("disabled",!1),t.colors.length&&t.colors.splice(l,1),t.colors.push(s);else if(l)t.colors.splice(l,1);else{if(t.colors[1]){const o=t.colors[1];e.closest("#options").find(`option.${o.toLowerCase()}`).removeClass("hide")}t.colors=[],e.parent().find("select:not(.active)").prop("disabled",!0).val("")}e.removeClass("active")}),$("#play").click(function(){l=players.filter(e=>!!e.colors.length),window.localStorage&&localStorage.setItem("players",JSON.stringify(players)),$("#backdrop").addClass("hide")});const s=$("#die-1").dice({duration:e,imageUrl:"./assets/img/dice.png",value:6}),t=$("#die-2").dice({duration:e,imageUrl:"./assets/img/dice.png",value:6});$("#dice").click(function(){l.length&&(s.dice("roll",e=>o.first=e),t.dice("roll",e=>o.second=e))}),window.onbeforeunload=function(e){l.length&&(prompt("The current game would be lost!")||(e.preventDefault(),e.returnValue=""))}});